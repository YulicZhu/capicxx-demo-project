/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.dbus 3.1.12.v201706201043.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#ifndef V1_COMMONAPI_EXAMPLES_E03_Methods_DBUS_PROXY_HPP_
#define V1_COMMONAPI_EXAMPLES_E03_Methods_DBUS_PROXY_HPP_

#include <v1/commonapi/examples/E03MethodsProxyBase.hpp>
#include "v1/commonapi/examples/E03MethodsDBusDeployment.hpp"

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/DBus/DBusAddress.hpp>
#include <CommonAPI/DBus/DBusFactory.hpp>
#include <CommonAPI/DBus/DBusProxy.hpp>
#include <CommonAPI/DBus/DBusAddressTranslator.hpp>
#include <CommonAPI/DBus/DBusEvent.hpp>

#undef COMMONAPI_INTERNAL_COMPILATION

#include <string>

# if defined(_MSC_VER)
#  if _MSC_VER >= 1300
/*
 * Diamond inheritance is used for the CommonAPI::Proxy base class.
 * The Microsoft compiler put warning (C4250) using a desired c++ feature: "Delegating to a sister class"
 * A powerful technique that arises from using virtual inheritance is to delegate a method from a class in another class
 * by using a common abstract base class. This is also called cross delegation.
 */
#    pragma warning( disable : 4250 )
#  endif
# endif

namespace v1 {
namespace commonapi {
namespace examples {

class E03MethodsDBusProxy
    : virtual public E03MethodsProxyBase,
      virtual public CommonAPI::DBus::DBusProxy {
public:
    E03MethodsDBusProxy(
        const CommonAPI::DBus::DBusAddress &_address,
        const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection);

    virtual ~E03MethodsDBusProxy() { }


    virtual MyStatusEvent& getMyStatusEvent();

    virtual void foo(const int32_t &_x1, const std::string &_x2, CommonAPI::CallStatus &_internalCallStatus, E03Methods::stdErrorTypeEnum &_error, int32_t &_y1, std::string &_y2, const CommonAPI::CallInfo *_info);
    virtual std::future<CommonAPI::CallStatus> fooAsync(const int32_t &_x1, const std::string &_x2, FooAsyncCallback _callback, const CommonAPI::CallInfo *_info);


    virtual void getOwnVersion(uint16_t& ownVersionMajor, uint16_t& ownVersionMinor) const;

private:


    CommonAPI::DBus::DBusEvent<MyStatusEvent, CommonAPI::Deployable< int32_t, CommonAPI::DBus::IntegerDeployment >> myStatus_;

};

} // namespace examples
} // namespace commonapi
} // namespace v1

#endif // V1_COMMONAPI_EXAMPLES_E03_Methods_DBUS_PROXY_HPP_

